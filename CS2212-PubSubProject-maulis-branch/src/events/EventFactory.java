package events;

import publishers.AbstractPublisher;


/**
 * @author kkontog, ktsiouni, mgrigori 
 *
 */
public class EventFactory {

	
	/**
	 * This is an implementation of the Factory Method design pattern
	 * Creates an instance of any of the subclasses derived from the top level class AbstractEvent
	 * 
	 * @param eventType a member of the {@link EventType} enumeration
	 * @param eventPublisherId a number generated by invoking the  {@link AbstractPublisher#hashCode()} on the {@link AbstractPublisher} instance issuing the event
	 * @param payload an object of type {@link EventMessage}
	 * @return
	 */
	public static AbstractEvent createEvent(EventType eventType, int eventPublisherId, EventMessage payload) {
		long eventID = EventIDMaker.getNewEventID(); // create unique event id
		switch(eventType) {
			case Announcement :
				System.out.println("Annoucement to all members, with event Id " + eventID + ", publisher id " + eventPublisherId + " and payload " + payload);
				return new AnnoucementEvent(eventID, eventPublisherId, payload); // event passed by dedicated channels that belong to company for announcement purposes
			case Advertisement :
				System.out.println("A word from our sponsor, with event id " + eventID + ", publisher id " + eventPublisherId + " and payload " + payload);
				return new AdvertisementEvent(eventID, eventPublisherId, payload); // events from our sponsor channels (have a limit to how much they can post because we dont want system to be flooded with ads
			default :
				System.out.println("A normal event posted by a member, with event Id " + eventID + ", publisher id " + eventPublisherId + " and payload " + payload);
				return new GeneralEvent(eventID, eventPublisherId, payload); // general event posted by our users include things like sports, personal content etc.
		}
	}
	
}
